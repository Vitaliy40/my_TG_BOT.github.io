from aiogram import F, Router
from aiogram.types import (Message, CallbackQuery, BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton,
                           LabeledPrice, PreCheckoutQuery)

from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import keyboards as kb
from requests2 import (add_info_user_to_db, add_user_to_db, get_category_id_by_name, add_info_item_to_db,
                       get_item_photo_id_by_name, get_item_photo, get_username_by_tg_id, get_tg_id_by_name,
                       get_user_by_tg_id, get_number_cart_by_tg_id, get_items_by_category, update_user_data)
import io

from email.message import EmailMessage
from aiosmtplib import send

async def send_email(text):
    message = EmailMessage()
    message["From"] = "vitalikhudikz@gmail.com"
    message["To"] = "dyraksobaka0@gmail.com"
    message["Subject"] = "–û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞"
    message.set_content(f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!\n{text}")

    await send(
        message,
        hostname="smtp.gmail.com",
        port=587,
        username="vitalikhudikz@gmail.com",
        password="imnm vmki whzn balj",
        start_tls=True
    )


def get_bot_and_token():
    from main import bot, API_TOKEN
    return bot, API_TOKEN

def get_bot():
    from main import bot
    return bot


user_item_index = {}
class Register(StatesGroup):
    name = State()
    user_name = State()
    user_cart_number = State()

class Change_Register(StatesGroup):
    new_name = State()
    new_card_number = State()
    new_user_name = State()
class Sell_Item(StatesGroup):
    name_item = State()
    description = State()
    price = State()
    item_photo = State()
    category = State()


photo_bytes = None

router = Router()

async def is_user_registered(tg_id: int) -> bool:
    user = await get_user_by_tg_id(tg_id)
    return user is not None

@router.message(CommandStart())
async def start(message: Message):
    await add_user_to_db(tg_id=message.from_user.id)
    await message.answer('–í—ñ—Ç–∞—é –≤–∞—Å —É –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ Easy Buy!\n–í–∏ –ø–ª–∞–Ω—É—î—Ç–µ –∫—É–ø–ª—è—Ç–∏ —Ç–æ–≤–∞—Ä–∏ —á–∏ –ø—Ä–æ–¥–∞–≤–∞—Ç–∏?',
                         reply_markup=kb.user_choice)

# –ü–µ—Ä—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –ø—Ä–æ–¥–∞–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏:

@router.message(F.text == '–ü—Ä–æ–¥–∞–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏')
async def start(message: Message):
    await message.answer('–î–æ–±—Ä–µ, —Ç–æ–¥—ñ –ø—Ä–æ–ø–æ–Ω—É—é –≤–∞–º —Å–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', reply_markup=kb.register)

@router.message(F.text == '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è')
async def start_register(message: Message, state: FSMContext):
    if await is_user_registered(message.from_user.id):
        await message.answer("–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.", reply_markup=kb.main_menu)
        return
    await state.set_state(Register.name)
    await message.answer("–î–ª—è –ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è")

@router.message(Register.name)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.user_name)
    await message.answer("–ß—É–¥–æ–≤–æ. –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —Ç–µ–ª–µ–≥—Ä–∞–º-—ñ–º'—è(–¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É:@user)")


@router.message(Register.user_name)
async def register_user_name(message: Message, state: FSMContext):
    await state.update_data(user_name=message.text)
    await state.set_state(Register.user_cart_number)
    await message.answer("–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ—ó –∫–∞—Ä—Ç–∫–∏")


@router.message(Register.user_cart_number)
async def register_cart_number(message: Message, state: FSMContext):

    user_cart_number = message.text

    if not user_cart_number.isdigit():
        await message.answer("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    user_data = await state.get_data()
    name = user_data.get("name")
    user_name = user_data.get("user_name")

    await add_info_user_to_db(
        username=user_name,
        user_cart_number=user_cart_number,
        tg_id=message.from_user.id
    )

    await message.answer(f"–í–∞—à–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–í–∞—à–µ —ñ–º'—è: {name};"
                         f"\n–í–∞—à–µ —Ç–µ–ª–µ–≥—Ä–∞–º-—ñ–º'—è: {user_name};\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏: {user_cart_number}.",
                         reply_markup=kb.main_menu)
    await state.clear()

@router.message(F.text == '–ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤üîé')
async def category_selection(message: Message):
    await message.answer('–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É', reply_markup=await kb.categories())


@router.message(F.text == '–ü–æ–≤—Ç–æ—Ä–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—èüîÅ')
async def user_changes_register(message: Message, state: FSMContext):
    await state.set_state(Change_Register.new_name)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è")

@router.message(Change_Register.new_name)
async def new_name(message: Message, state: FSMContext):
    await state.update_data(new_name=message.text)
    await state.set_state(Change_Register.new_user_name)
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –Ω–æ–≤–µ —Ç–µ–ª–µ–≥—Ä–∞–º-—ñ–º'—è")

@router.message(Change_Register.new_user_name)
async def new_username(message: Message, state: FSMContext):
    await state.update_data(new_user_name=message.text)
    await state.set_state(Change_Register.new_card_number)
    await message.answer('–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏')

@router.message(Change_Register.new_card_number)
async def new_card_number(message: Message, state: FSMContext):
    new_card_number = message.text

    if not new_card_number.isdigit():
        await message.answer('–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏')
        return

    user_data = await state.get_data()
    new_name = user_data.get('new_name')
    new_user_name = user_data.get('new_user_name')

    await update_user_data(tg_id=message.from_user.id,
                           new_name=new_name,
                           new_card_number=new_card_number,
                           new_user_name=new_user_name)

    await message.answer(f"–í–∞—à–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–í–∞—à–µ —ñ–º'—è: {new_name};"
                         f"\n–í–∞—à–µ —Ç–µ–ª–µ–≥—Ä–∞–º-—ñ–º'—è: {new_user_name};\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏: {new_card_number}.",
                         reply_markup=kb.main_menu)
    await state.clear()

# —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –∫—É–ø–ª—è—Ç–∏ —Ç–æ–≤–∞—Ä–∏:

@router.message(F.text == '–ö—É–ø–ª—è—Ç–∏ —Ç–æ–≤–∞—Ä–∏')
async def start_2(message: Message):
    await message.answer('–í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é', reply_markup=kb.main_menu)

@router.message(F.text == '–ü—Ä–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Äüí≥')
async def sell_item(message: Message, state: FSMContext):
    await state.set_state(Sell_Item.name_item)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–æ–≤–∞—Ä—É")

@router.message(Sell_Item.name_item)
async def item_price(message: Message, state: FSMContext):
    await state.update_data(name_item=message.text)
    await state.set_state(Sell_Item.price)
    await message.answer('–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –≤–∞—à–æ–≥–æ —Ç–æ–≤–∞—Ä—É')

@router.message(Sell_Item.price)
async def item_description(message: Message, state: FSMContext):
    price = message.text
    if not price.isdigit():
        await message.answer('–¶—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—É –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —á–∏—Å–ª–∞')
        return
    else:
        await state.update_data(price=price)
        await state.set_state(Sell_Item.description)
        await message.answer('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –≤–∞—à–æ–≥–æ —Ç–æ–≤–∞—Ä—É')

@router.message(Sell_Item.description)
async def item_Photo(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(Sell_Item.item_photo)
    await message.answer('–¢–µ–ø–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–æ–≥–æ —Ç–æ–≤–∞—Ä—É')

@router.message(Sell_Item.item_photo)
async def item_category(message: Message, state: FSMContext):
    global photo_bytes
    if not message.photo:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ.")
        return

    if len(message.photo) < 2:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –≤ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ–º—É —Ä–æ–∑–º—ñ—Ä—ñ.")
        return

    item_photo = message.photo[-1]
    await state.update_data(item_photo=item_photo)
    file_info = await message.bot.get_file(item_photo.file_id)
    file = await message.bot.download_file(file_info.file_path)

    photo_bytes = file.read()
    await state.update_data(item_photo=photo_bytes)

    await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É', reply_markup=await kb.categories2())
    await state.set_state(Sell_Item.category)

@router.message(Sell_Item.category)
async def end_sell(message: Message, state: FSMContext):
    category_name = message.text
    if category_name not in ['–û–¥—è–≥', '–í–∑—É—Ç—Ç—è', '–ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞ —Ç–∞ –≥–∞–¥–∂–µ—Ç–∏', '–ú–µ–±–ª—ñ —Ç–∞ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –¥–æ–º—É', '–Ü–≥—Ä–∞—à–∫–∏',
                             '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä–∏', '–ö–Ω–∏–≥–∏ —Ç–∞ –º–µ–¥—ñ–∞', '–ü—Ä–æ–¥—É–∫—Ç–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è', '–Ü–Ω—à–µ']:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.")
        return

    category = await get_category_id_by_name(category_name)

    item_data = await state.get_data()
    name = item_data.get("name_item")
    description = item_data.get("description")
    price = item_data.get("price")
    item_photo = item_data.get("item_photo")


    try:
        await add_info_item_to_db(name=name, description=description, price=price, category=category,
                                  item_photo=item_photo, tg_id=message.from_user.id)
    except ValueError as e:
        await message.answer(str(e))

    item_id = await get_item_photo_id_by_name(name)
    photo_bytes = await get_item_photo(item_id)

    photo = io.BytesIO(photo_bytes)
    photo.seek(0)
    input_file = BufferedInputFile(photo.read(), filename="photo.jpg")
    user_name = await get_username_by_tg_id(tg_id=message.from_user.id)
    user_cart_number = await get_number_cart_by_tg_id(tg_id=message.from_user.id)
    await message.answer_photo(input_file, caption=f"–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É: {name}\n–¶—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—É: {price}–≥—Ä–Ω"
                                                   f"\n–û–ø–∏—Å —Ç–æ–≤–∞—Ä—É: {description}"
                                                   f"\n–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ–¥–∞–≤—Ü—è —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É:"
                                                   f"\nUsername –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_name}"
                                                   f"\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏: {user_cart_number}")

    await state.clear()

@router.message(F.text == '–ù–∞ –≥–æ–ª–æ–≤–Ω—É')
async def menu(message: Message):
    await message.answer('–í–∏ –∑–∞—Ä–∞–∑ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é', reply_markup=kb.main_menu)

@router.message(F.text == '–ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤üîé')
async def search_item(message: Message):
    await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É', reply_markup=await kb.categories())

@router.callback_query(F.data.startswith('category_'))
async def show_items(callback: CallbackQuery):
    try:
        category_id = int(callback.data.split('_')[1])
    except IndexError:
        await callback.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.")
        return
    items = await get_items_by_category(category_id)
    user_id = callback.from_user.id

    if items:
        user_item_index[user_id] = 0
        item = items[0]

        tg_id = await get_tg_id_by_name(name=item.name)

        user_name = await get_username_by_tg_id(tg_id=tg_id)
        user_cart_number = await get_number_cart_by_tg_id(tg_id=tg_id)
        item_id = await get_item_photo_id_by_name(item.name)
        photo_bytes = await get_item_photo(item_id)
        photo = io.BytesIO(photo_bytes)
        photo.seek(0)
        input_file = BufferedInputFile(photo.read(), filename="photo.jpg")

        search_process = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton
                                                                (text='–û–ø–ª–∞—Ç–∏—Ç–∏üíµ',
                                                                 callback_data=f'Pay_{category_id}')],
                                                               [InlineKeyboardButton
                                                                (text='–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—Ä–∑–∏–Ω–∏üß∫', callback_data='tray')],
                                                               [InlineKeyboardButton
                                                                (text='–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ç–æ–≤–∞—Ä‚û°Ô∏è',
                                                                 callback_data=f'next_item_{category_id}')]],
                                              resize_keyboard=True)

        await callback.message.answer_photo(input_file, caption=f"–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É: {item.name}"
                                                                f"\n–¶—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—É: {item.price}–≥—Ä–Ω"
                                                                f"\n–û–ø–∏—Å —Ç–æ–≤–∞—Ä—É: {item.description}"
                                                                f"\n–Ü–Ω—Ñ–æ –ø—Ä–æ –ø—Ä–æ–¥–∞–≤—Ü—è:"
                                                                f"\nUsername –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_name}"
                                                                f"\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_cart_number}",
                                            reply_markup=search_process)
    else:
        await callback.message.answer('–ù–∞–∂–∞–ª—å —Ç–æ–≤–∞—Ä –Ω–µ –±—É–ª–æ –∑–Ω–∞–π–¥–µ–Ω–æ, –∞–±–æ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤')

@router.callback_query(F.data.startswith('next_item_'))
async def show_next_item(callback: CallbackQuery):
    try:
        category_id = int(callback.data.split('_')[2])
    except IndexError:
        await callback.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.")
        return
    items = await get_items_by_category(category_id)
    user_id = callback.from_user.id

    if user_id in user_item_index:
        user_item_index[user_id] += 1

        if user_item_index[user_id] >= len(items):
            user_item_index[user_id] = 0

        current_index = user_item_index[user_id]
        item = items[current_index]

        tg_id = await get_tg_id_by_name(name=item.name)
        user_name = await get_username_by_tg_id(tg_id=tg_id)
        user_cart_number = await get_number_cart_by_tg_id(tg_id=tg_id)
        item_id = await get_item_photo_id_by_name(item.name)
        photo_bytes = await get_item_photo(item_id)
        photo = io.BytesIO(photo_bytes)
        photo.seek(0)
        input_file = BufferedInputFile(photo.read(), filename="photo.jpg")

        search_process = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton
                                                                (text='–û–ø–ª–∞—Ç–∏—Ç–∏üíµ',
                                                                 callback_data=f'Pay_{category_id}')],
                                                               [InlineKeyboardButton
                                                                (text='–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—Ä–∑–∏–Ω–∏üß∫', callback_data='tray')],
                                                               [InlineKeyboardButton
                                                                (text='–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ç–æ–≤–∞—Ä‚û°Ô∏è',
                                                                 callback_data=f'next_item_{category_id}')],
                                                               [InlineKeyboardButton(text='–î–æ –º–µ–Ω—é',
                                                                                     callback_data='to_main')]],
                                              resize_keyboard=True)

        await callback.message.answer_photo(input_file, caption=f"–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É: {item.name}"
                                                      f"\n–¶—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—É: {item.price}–≥—Ä–Ω"
                                                      f"\n–û–ø–∏—Å —Ç–æ–≤–∞—Ä—É: {item.description}"
                                                      f"\n–Ü–Ω—Ñ–æ –ø—Ä–æ –ø—Ä–æ–¥–∞–≤—Ü—è:"
                                                      f"\nUsername –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_name}"
                                                      f"\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_cart_number}",
                                            reply_markup=search_process)

@router.callback_query(F.data.startswith('Pay_'))
async def pay_for_item(callback: CallbackQuery):
    try:
        parts = callback.data.split('_')

        if len(parts) != 2:
            raise IndexError("–ü–æ–º–∏–ª–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —á–∞—Å—Ç–∏–Ω —É callback.data")

        category_id = int(parts[1])
    except IndexError:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –≤ –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—É.")
        return
    except ValueError:
        await callback.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.")
        return

    bot, API_TOKEN = get_bot_and_token()
    user_id = callback.from_user.id
    item_index = user_item_index.get(user_id, 0)
    CURRENCY = "UAH"
    items = await get_items_by_category(category_id)
    item = items[item_index]

    prices = [LabeledPrice(label=item.name, amount=item.price * 100)]

    await bot.send_invoice(
        chat_id=callback.message.chat.id,
        title=item.name,
        description=item.description,
        payload='payment_payload',
        provider_token=API_TOKEN,
        start_parameter='test-payment',
        currency=CURRENCY,
        prices=prices,
        need_name=True,  # –ó–∞–ø–∏—Ç —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        need_phone_number=True,  # –ó–∞–ø–∏—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        need_email=True,  # –ó–∞–ø–∏—Ç –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏
        need_shipping_address=True  # –ó–∞–ø–∏—Ç –∞–¥—Ä–µ—Å–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    )

@router.pre_checkout_query()
async def pre_checkout_query_handler(pre_checkout_query: PreCheckoutQuery):
    bot = get_bot()
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@router.message(F.content_type == 'successful_payment')
async def successful_payment_handler(message: Message):
    payment_info = message.successful_payment
    currency = payment_info.currency
    total_amount = payment_info.total_amount / 100
    order_info = payment_info.order_info
    name = order_info.name if order_info.name else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    phone = order_info.phone_number if order_info.phone_number else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    shipping_address = order_info.shipping_address

    if shipping_address:
        city = shipping_address.city if shipping_address.city else "–ú—ñ—Å—Ç–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
        address = (
            f"{shipping_address.country_code}, "
            f"{shipping_address.state}, "
            f"{city}, "
            f"{shipping_address.street_line1}, "
            f"{shipping_address.street_line2 if shipping_address.street_line2 else ''}, "
            f"{shipping_address.post_code}"
        )
    else:
        city = "–ú—ñ—Å—Ç–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
        address = "–ê–¥—Ä–µ—Å–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞"

    await message.answer("–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—É –æ–ø–ª–∞—Ç—É!", reply_markup=kb.main_menu)
    text = (f'–û—Å—å —ñ–Ω—Ñ–æ –ø—Ä–æ –ø–æ–∫—É–ø—Ü—è:\n–¶—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—É —Å—Ç–∞–Ω–æ–≤–∏–ª–∞: {total_amount}{currency}\n–Ü–º—è –ø–æ–∫—É–ø—Ü—è: {name}'
            f'\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {phone}\n–ê–¥—Ä–µ—Å–∞: {city}')

    await send_email(text)

@router.callback_query(F.data == 'to_main')
async def to_main(callback: CallbackQuery):
    await callback.message.answer('–í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é', reply_markup=kb.main_menu)



















